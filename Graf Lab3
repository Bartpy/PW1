#include <allegro.h>
#include <time.h>
#include <winalleg.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>

int screenWidth = 1024;
int screenHeight = 768;

int viewport[] = {200, 200, screenWidth - 200, screenHeight - 200};

BITMAP *bmp;

#define colorBlack  makecol(0,0,0)
#define colorWhite  makecol(255,255,255)
#define colorRed  makecol(255,0,0)
#define colorGreen  makecol(0,255,0)
#define colorBlue  makecol(0,0,255)

void init(){
    srand(time(NULL));
    allegro_init();
    set_gfx_mode(GFX_AUTODETECT_WINDOWED, screenWidth, screenHeight, 0, 0);
    install_keyboard();
    install_mouse();
    install_timer();

    show_mouse(screen);
    bmp = create_bitmap(screenWidth, screenHeight);
    clear_to_color(bmp, colorBlack);
}

void destroy(){
    destroy_bitmap(bmp);
    allegro_exit();
}

void drawlineviewport(int x1, int y1, int x2, int y2){
    int pcode1[4] = {0,0,0,0};
    int pcode2[4] = {0,0,0,0};
    int zeroarray[4] = {0,0,0,0};

    if(x1 < viewport[0]) pcode1[0] = 1;
    if(x1 > viewport[2]) pcode1[1] = 1;
    if(y1 > viewport[3]) pcode1[2] = 1;
    if(y1 < viewport[1]) pcode1[3] = 1;

    if(x2 < viewport[0]) pcode2[0] = 1;
    if(x2 > viewport[2]) pcode2[1] = 1;
    if(y2 > viewport[3]) pcode2[2] = 1;
    if(y2 < viewport[1]) pcode2[3] = 1;

    int pcodeAND[4] = {pcode1[0] & pcode2[0], pcode1[1] & pcode2[1], pcode1[2] & pcode2[2], pcode1[3] & pcode2[3]};

    if(memcmp(pcode1, zeroarray, sizeof(pcode1)) == 0 && memcmp(pcode2, zeroarray, sizeof(pcode2)) == 0){
        line(bmp, x1, y1, x2, y2, colorGreen);
        return;
    } else {
        if(memcmp(pcodeAND, zeroarray, sizeof(pcodeAND)) != 0){
            line(bmp, x1, y1, x2, y2, colorRed);
            return;
        } else {
            if(memcmp(pcode1, zeroarray, sizeof(pcode1)) == 0){
                int tmp[4];
                memcpy(tmp, pcode1, sizeof(pcode1));
                memcpy(pcode1, pcode2, sizeof(pcode2));
                memcpy(pcode2, tmp, sizeof(tmp));

                int tmp1 = x1;
                x1 = x2;
                x2 = tmp1;
                int tmp2 = y1;
                y1 = y2;
                y2 = tmp2;
            }

            if(pcode1[0] == 1){
                int tmpx = x1;
                int tmpy = y1;
                y1 = y1 + (viewport[0] - x1) * (y2 - y1) / (x2 - x1);
                x1 = viewport[0];
                line(bmp, tmpx, tmpy, viewport[0], y1, colorRed);
                drawlineviewport(x1, y1, x2, y2);
            }
            if(pcode1[1] == 1){
                int tmpx = x1;
                int tmpy = y1;
                y1 = y1 + (viewport[2] - x1) * (y2 - y1) / (x2 - x1);
                x1 = viewport[2];
                line(bmp, tmpx, tmpy, viewport[2], y1, colorRed);
                drawlineviewport(x1, y1, x2, y2);
            }
            if(pcode1[2] == 1){
                int tmpx = x1;
                int tmpy = y1;
                x1 = x1 + (viewport[3] - y1) * (x2 - x1) / (y2 - y1);
                y1 = viewport[3];
                line(bmp, tmpx, tmpy, x1, viewport[3], colorRed);
                drawlineviewport(x1, y1, x2, y2);
            }
            if(pcode1[3] == 1){
                int tmpx = x1;
                int tmpy = y1;
                x1 = x1 + (viewport[1] - y1) * (x2 - x1) / (y2 - y1);
                y1 = viewport[1];
                line(bmp, tmpx, tmpy, x1, viewport[1], colorRed);
                drawlineviewport(x1, y1, x2, y2);
            }
        }
    }
}

void drawtriangleviewport(int x1, int y1, int x2, int y2, int x3, int y3){
    drawlineviewport(x1, y1, x2, y2);
    drawlineviewport(x2, y2, x3, y3);
    drawlineviewport(x3, y3, x1, y1);
}

void drawrectviewport(int x1, int y1, int x2, int y2){
    drawlineviewport(x1, y1, x2, y1);
    drawlineviewport(x2, y1, x2, y2);
    drawlineviewport(x2, y2, x1, y2);
    drawlineviewport(x1, y2, x1, y1);
}

void refresh(){
    clear_to_color(bmp, colorBlack);

    rect(bmp, viewport[0], viewport[1], viewport[2], viewport[3], colorWhite);

    drawlineviewport(rand()%screenWidth,
                     rand()%screenHeight,
                     rand()%screenWidth,
                     rand()%screenHeight);

    drawlineviewport(rand()%screenWidth,
                     rand()%screenHeight,
                     rand()%screenWidth,
                     rand()%screenHeight);

    drawtriangleviewport(rand()%screenWidth,
                         rand()%screenHeight,
                         rand()%screenWidth,
                         rand()%screenHeight,
                         rand()%screenWidth,
                         rand()%screenHeight);

    drawrectviewport(rand()%screenWidth,
                     rand()%screenHeight,
                     rand()%screenWidth,
                     rand()%screenHeight);

    blit(bmp, screen, 0, 0, 0, 0, bmp->w, bmp->h);
}

int main(){
    init();

    refresh();
    install_int(refresh, 1000);

    while(1){
        if(key[KEY_ESC])
            break;
    };

    remove_int(refresh);
    destroy();
    return 0;
}
END_OF_MAIN();


