Klient 2

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <wait.h>
#include <errno.h>
#define FIFO1 "/tmp/fifo.1" // do pisania dla klienta 1 i czytania dla klienta 2
#define FIFO2 "/tmp/fifo.2" // do pisania dla klienta 2 i czytania dla klienta 1
#define QUIT "\1"
int pid_potomka,pid_rodzica,fifo_write;

void oblsluga_zakonczenia_procesow(int nr_sig)
{
	if(getpid()==pid_potomka){
		char buff[]="\1";
		if (strlen(buff) != write(fifo_write,buff,strlen(buff)))
			perror("blad zapisu do fifo");
		exit(0);
	}
	else if(getpid()==pid_rodzica){

		wait(NULL);
		exit(0);
	}
}

void oblsluga_zakonczenia_potomka(int nr_sig)
{
	exit(0);
}


int main()
{
	signal(SIGINT,oblsluga_zakonczenia_procesow);


	int childpid;
	if ((childpid = fork()) == -1)
	{
		perror("nie moge forknac");
		exit(1);
	}
	else
		if (childpid ==0 ) // POTOMEK PISZE
		{
			signal(SIGUSR1,oblsluga_zakonczenia_potomka);
			pid_potomka=getpid();

			int fifo;

			if((fifo=open(FIFO2,O_WRONLY))<0){
				perror("Nie mozna otworzyc kolejki do pisania");	
			}
			fifo_write=fifo;
			char buff[1024];
			while(1==1){	

				fgets(buff,sizeof(buff),stdin);
				if (strlen(buff) != write(fifo,buff,strlen(buff)))
					perror("blad zapisu do fifo");

			}
		}
		else // RODZIC CZYTA
		{
			signal(SIGUSR1,SIG_IGN);
			pid_rodzica=getpid();
			int fifo;
			if((fifo=open(FIFO1,O_RDONLY))<0){
				perror("Nie mozna otworzyc kolejki do czytania");
			}	
			char buff[1024];
			while(1==1){	
				int n=read(fifo,buff,sizeof(buff));
				if (n<=0){
					perror("blad odczytu z fifo");
					sleep(10);
				}
				else{
					buff[n]='\0';
					if (strcmp(QUIT, buff)==0){
						printf("Klient do rozmowy sie odlaczyl\n");
						break;	
					}
					printf("Klient:");
					printf("%s",buff);
				}

			}
			kill(pid_potomka,SIGUSR1);
			wait(NULL);
			exit(0);
		}

	exit(0);
	return 0;  
}
